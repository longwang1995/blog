(window.webpackJsonp=window.webpackJsonp||[]).push([[31],{446:function(e,v,t){"use strict";t.r(v);var _=t(2),i=Object(_.a)({},(function(){var e=this,v=e._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[v("h1",{attrs:{id:"git基础操作"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#git基础操作"}},[e._v("#")]),e._v(" git基础操作")]),e._v(" "),v("h2",{attrs:{id:"_1-git配置命令"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-git配置命令"}},[e._v("#")]),e._v(" 1.git配置命令")]),e._v(" "),v("blockquote",[v("p",[e._v("查询配置")])]),e._v(" "),v("ol",[v("li",[e._v("列出当前配置："),v("code",[e._v("git config --list")])]),e._v(" "),v("li",[e._v("列出repository配置："),v("code",[e._v("git config --local --list")])]),e._v(" "),v("li",[e._v("列出全局配置："),v("code",[e._v("git config --global --list")])]),e._v(" "),v("li",[e._v("列出系统配置："),v("code",[e._v("git config --system --list")])])]),e._v(" "),v("blockquote",[v("p",[e._v("第一次使用git，配置用户名")])]),e._v(" "),v("ol",[v("li",[e._v("配置用户名："),v("code",[e._v('git config --global user.name "your name"')])]),e._v(" "),v("li",[e._v("配置用户邮箱："),v("code",[e._v('git config --global user.email "your email"')])])]),e._v(" "),v("h2",{attrs:{id:"_2-工作区上的操作命令"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-工作区上的操作命令"}},[e._v("#")]),e._v(" 2.工作区上的操作命令")]),e._v(" "),v("blockquote",[v("p",[e._v("新建仓库")])]),e._v(" "),v("ol",[v("li",[e._v("新建项目文件夹然后执行"),v("code",[e._v("git init")])]),e._v(" "),v("li",[e._v("从远程git仓库复制项目："),v("code",[e._v("git clone <url>")]),e._v("，可以在clone命令后指定新的项目名："),v("code",[e._v("git clone <url> <name>")])])]),e._v(" "),v("blockquote",[v("p",[e._v("提交")])]),e._v(" "),v("ol",[v("li",[e._v("提交工作区所有文件到暂存区："),v("code",[e._v("git add .")])]),e._v(" "),v("li",[e._v("提交工作区指定文件到暂存区："),v("code",[e._v("git add <file1> <file2> ...")])]),e._v(" "),v("li",[e._v("提交工作区中某个文件夹中所有文件到暂存区："),v("code",[e._v("git add [dir]")])])]),e._v(" "),v("blockquote",[v("p",[e._v("撤销")])]),e._v(" "),v("ol",[v("li",[e._v("删除工作区文件，并且也从暂存区删除对应文件的记录："),v("code",[e._v("git rm <file1> <file2>")])]),e._v(" "),v("li",[e._v("从暂存区中删除文件，但是工作区依然还有该文件： "),v("code",[e._v("git rm --cached <file>")])]),e._v(" "),v("li",[e._v("取消暂存区已经暂存的文件："),v("code",[e._v("git reset HEAD <file>...")])]),e._v(" "),v("li",[e._v("撤销文件修改："),v("code",[e._v("git checkout --<file>")])]),e._v(" "),v("li",[e._v("储藏工作，以便能切换分支："),v("code",[e._v("git stash")])]),e._v(" "),v("li",[e._v("查看储藏的工作："),v("code",[e._v("git stash list")])]),e._v(" "),v("li",[e._v("应用最新的储藏："),v("code",[e._v("git stash apply")]),e._v("，应用指定储藏："),v("code",[e._v("git stash apply stash@{index}")])]),e._v(" "),v("li",[e._v("使用apply命令只是应用储藏，内容任然在栈上。需要移除指定的储藏："),v("code",[e._v("git stash drop stash{0}")])])]),e._v(" "),v("blockquote",[v("p",[e._v("查看信息")])]),e._v(" "),v("ol",[v("li",[e._v("查询当前工作区所有文件的状态："),v("code",[e._v("git status")])]),e._v(" "),v("li",[e._v("比较工作区文件与暂存区之间的差异："),v("code",[e._v("git diff")]),e._v(","),v("code",[e._v("git diff <filename>")])])]),e._v(" "),v("h2",{attrs:{id:"_3-暂存区的操作命令"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_3-暂存区的操作命令"}},[e._v("#")]),e._v(" 3.暂存区的操作命令")]),e._v(" "),v("blockquote",[v("p",[e._v("提交文件到版本库")])]),e._v(" "),v("ol",[v("li",[e._v("将暂存区中的文件提交到本地仓库中，即打上新版本："),v("code",[e._v('git commit -m "commit_info"')])]),e._v(" "),v("li",[e._v("将所有已经使用git管理过的文件暂存后一并提交，跳过add到暂存区的过程："),v("code",[e._v('git commit -a -m "commit_info"')])]),e._v(" "),v("li",[e._v("撤销上一次提交："),v("code",[e._v("git commit --amend")])])]),e._v(" "),v("blockquote",[v("p",[e._v("查看信息")])]),e._v(" "),v("ol",[v("li",[e._v("比较暂存区与上一版本的差异："),v("code",[e._v("git diff --cached")])]),e._v(" "),v("li",[e._v("指定文件在暂存区和本地仓库的不同："),v("code",[e._v("git diff <file-name> --cached")])]),e._v(" "),v("li",[e._v("查看提交历史："),v("code",[e._v("git log")])])]),e._v(" "),v("blockquote",[v("p",[e._v("打标签")])]),e._v(" "),v("ol",[v("li",[e._v("列出现在所有的标签："),v("code",[e._v("git tag")])]),e._v(" "),v("li",[e._v("使用特定的搜索模式列出符合条件的标签，例如只对1.4.2系列的版本感兴趣："),v("code",[e._v('git tag -l "v1.4.2.*"')])]),e._v(" "),v("li",[e._v("创建一个含附注类型的标签，需要加-a参数，如："),v("code",[e._v('git tag -a v1.4 -m "my version 1.4"')])]),e._v(" "),v("li",[e._v("使用git show命令查看相应标签的版本信息，并连同显示打标签时的提交对象："),v("code",[e._v("git show v1.4")])]),e._v(" "),v("li",[e._v("如果有自己的私钥，可以使用GPG来签署标签，只需要在命令中使用-s参数："),v("code",[e._v('git tag -s v1.5 -m "my signed 1.5 tag"')])]),e._v(" "),v("li",[e._v("验证已签署的标签：git tag -v，如："),v("code",[e._v("git tag -v v1.5")])]),e._v(" "),v("li",[e._v("创建轻量级标签："),v("code",[e._v("git tag v1.4")])]),e._v(" "),v("li",[e._v("将标签推送到远程仓库中："),v("code",[e._v("git push origin v1.5")]),e._v(", 将本地所有标签全部推送到远程仓库中："),v("code",[e._v("git push origin --tags")])]),e._v(" "),v("li",[e._v("删除本地tag："),v("code",[e._v("git tag -d $(git tag -l)")])])]),e._v(" "),v("blockquote",[v("p",[e._v("分制管理")])]),e._v(" "),v("ol",[v("li",[e._v("创建分支："),v("code",[e._v("git branch <branch-name>")])]),e._v(" "),v("li",[e._v("从当前所处的分支切换到其他分支："),v("code",[e._v("git checkout <branch-name>")])]),e._v(" "),v("li",[e._v("新建并切换到新建分支上："),v("code",[e._v("git checkout -b <branch-name>")])]),e._v(" "),v("li",[e._v("删除分支："),v("code",[e._v("git branch -d <branch-name>")])]),e._v(" "),v("li",[e._v("将当前分支与指定分支进行合并："),v("code",[e._v("git merge <branch-name>")])]),e._v(" "),v("li",[e._v("显示本地仓库的所有分支："),v("code",[e._v("git branch")])]),e._v(" "),v("li",[e._v("查看各个分支最后一个提交对象的信息："),v("code",[e._v("git branch -v")])]),e._v(" "),v("li",[e._v("查看哪些分支已经合并到当前分支："),v("code",[e._v("git branch --merged")])]),e._v(" "),v("li",[e._v("查看当前哪些分支还没有合并到当前分支："),v("code",[e._v("git branch --no-merged")])]),e._v(" "),v("li",[e._v("把远程分支合并到当前分支："),v("code",[e._v("git merge <remote-name>/<branch-name>")])]),e._v(" "),v("li",[e._v("在远程分支的基础上创建新的本地分支："),v("code",[e._v("git checkout -b <branch-name> <remote-name>/<branch-name>")]),e._v("，如："),v("code",[e._v("git checkout -b serverfix origin/serverfix")])]),e._v(" "),v("li",[e._v("从远程分支checkout出来的本地分支，称之为跟踪分支。在跟踪分支上向远程分支上推送内容："),v("code",[e._v("git push")]),e._v("。该命令会自动判断应该向远程仓库中的哪个分支推送数据；在跟踪分支上合并远程分支："),v("code",[e._v("git pull")])]),e._v(" "),v("li",[e._v("将一个分支里提交的改变移到基底分支上重放一遍："),v("code",[e._v("git rebase <rebase-branch> <branch-name>")]),e._v("，如："),v("code",[e._v("git rebase master server")]),e._v("，将特性分支server提交的改变在基底分支master上重演一遍；使用rebase操作最大的好处是像在单个分支上操作的，提交的修改历史也是一根线；如果想把基于一个特性分支上的另一个特性分支变基到其他分支上，可以使用--onto操作："),v("code",[e._v("git rebase --onto <rebase-branch> <feature branch> <sub-feature-branch>")]),e._v("，如："),v("code",[e._v("git rebase --onto master server client")]),e._v("；使用rebase操作应该遵循的原则是："),v("strong",[e._v("一旦分支中的提交对象发布到公共仓库，就千万不要对该分支进行rebase操作")])])]),e._v(" "),v("h2",{attrs:{id:"_4-本地仓库的操作"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_4-本地仓库的操作"}},[e._v("#")]),e._v(" 4.本地仓库的操作")]),e._v(" "),v("ol",[v("li",[e._v("查看本地仓库关联的远程仓库："),v("code",[e._v("git remote")]),e._v("；在克隆完每个远程仓库后，远程仓库默认为origin;加上-v的参数后，会显示远程仓库的url地址")]),e._v(" "),v("li",[e._v("添加远程仓库，一般会取一个简短的别名："),v("code",[e._v("git remote add [remote-name] [url]")]),e._v("，比如："),v("code",[e._v("git remote add example git://github.com/example/example.git")])]),e._v(" "),v("li",[e._v("从远程仓库中抓取本地仓库中没有的更新："),v("code",[e._v("git fetch [remote-name]")]),e._v("，如"),v("code",[e._v("git fetch origin")]),e._v(";使用fetch只是将远端数据拉到本地仓库，并不自动合并到当前工作分支，只能人工合并。如果设置了某个分支关联到远程仓库的某个分支的话，可以使用"),v("code",[e._v("git pull")]),e._v("来拉去远程分支的数据，然后将远端分支自动合并到本地仓库中的当前分支")]),e._v(" "),v("li",[e._v("将本地仓库某分支推送到远程仓库上："),v("code",[e._v("git push [remote-name] [branch-name]")]),e._v("，如"),v("code",[e._v("git push origin master")]),e._v("；如果想将本地分支推送到远程仓库的不同名分支："),v("code",[e._v("git push <remote-name> <local-branch>:<remote-branch>")]),e._v("，如"),v("code",[e._v("git push origin serverfix:awesomebranch")]),e._v(";如果想删除远程分支："),v("code",[e._v("git push [romote-name] :<remote-branch>")]),e._v("，如"),v("code",[e._v("git push origin :serverfix")]),e._v("。这里省略了本地分支，也就相当于将空白内容推送给远程分支，就等于删掉了远程分支")]),e._v(" "),v("li",[e._v("查看远程仓库的详细信息："),v("code",[e._v("git remote show origin")])]),e._v(" "),v("li",[e._v("修改某个远程仓库在本地的简称："),v("code",[e._v("git remote rename [old-name] [new-name]")]),e._v("，如"),v("code",[e._v("git remote rename origin org")])]),e._v(" "),v("li",[e._v("移除远程仓库："),v("code",[e._v("git remote rm [remote-name]")])])]),e._v(" "),v("h2",{attrs:{id:"_5-忽略文件-gitignore"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_5-忽略文件-gitignore"}},[e._v("#")]),e._v(" 5.忽略文件.gitignore")]),e._v(" "),v("div",{staticClass:"language-git extra-class"},[v("pre",{pre:!0,attrs:{class:"language-git"}},[v("code",[v("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 此为注释 – 将被 Git 忽略")]),e._v("\n"),v("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 忽略所有 .a 结尾的文件")]),e._v("\n*.a\n"),v("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 但 lib.a 除外")]),e._v("\n!lib.a\n"),v("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 仅仅忽略项目根目录下的 TODO 文件，不包括 subdir/TODO")]),e._v("\n/TODO\n"),v("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 忽略 build/ 目录下的所有文件")]),e._v("\nbuild/\n"),v("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 会忽略 doc/notes.txt 但不包括 doc/server/arch.txt")]),e._v("\ndoc/*.txt\n"),v("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 忽略 doc/ 目录下所有扩展名为 txt 的文件")]),e._v("\ndoc/**/*.txt\n")])])]),v("h2",{attrs:{id:"_6-git子仓库深入浅出"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_6-git子仓库深入浅出"}},[e._v("#")]),e._v(" 6.Git子仓库深入浅出")]),e._v(" "),v("blockquote",[v("p",[e._v("Git两种子仓库使用方案："),v("code",[e._v("git submodule")]),e._v("|"),v("code",[e._v("git subtree")])])])])}),[],!1,null,null,null);v.default=i.exports}}]);